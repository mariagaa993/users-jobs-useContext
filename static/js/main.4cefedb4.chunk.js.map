{"version":3,"sources":["components/modal/close-button.svg","components/navbar/icon-nav.svg","components/pages/Home.js","components/table/Table.js","contexts/JobContext.js","components/modal/Modal.js","reducers/JobsReducer.js","services/JobsService.js","components/jobModal/JobModal.js","components/contentContainer/ContentContainer.js","components/pages/JobPage.js","contexts/UserContext.js","reducers/UsersReducer.js","services/UsersService.js","components/userModal/UserModal.js","components/newUserModal/NewUserModal.js","components/pages/UserPage.js","components/navbar/Navbar.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","Table","headers","children","map","header","JobContext","createContext","Modal","title","close","type","onClick","src","closeButton","jobsReducer","state","action","jobs","job","id","editJ","name","filter","deleteJ","urlJobs","getJobs","a","axios","get","res","data","Error","editJob","selectedJob","newJob","changeJob","put","deleteJob","delete","JobModal","useContext","setDisplayJobModal","jobsDispatch","useState","setNewJob","save","defaultValue","onChange","event","target","value","ContentContainer","JobPage","useReducer","displayJobModal","setSelectedJob","useEffect","then","deleteJobs","Provider","key","editJobs","icon","faUserEdit","style","marginLeft","faTrash","UserContext","usersReducer","users","addU","user","editU","jobId","deleteU","urlUsers","getUsers","addUser","newUser","addNewUser","post","editUser","selectedUser","newName","newJobId","changeUser","deleteUser","UserModal","setDisplayUserModal","usersDispatch","setNewName","setNewJobId","NewUserModal","setDisplayNewUser","setNewUser","placeholder","disabled","selected","UserPage","setSelectedUser","displayNewUser","displayUserModal","deleteUsers","faUserPlus","find","avatar","Navbar","iconNav","to","path","exact","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4cefedb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close-button.aeec2863.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-nav.18b6fa13.svg\";","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"container-home\">\r\n            <div className=\"content-home\">\r\n                <h1 className=\"home-title\">Users and Jobs App</h1>\r\n                <h3 className=\"home-subtitle\">This app was created to \r\n                    implement hook: useContext.</h3>\r\n                <p>In the Users Section you can add a new user. You can also \r\n                    edit and delete an existing user. In the Jobs Section \r\n                    you can edit and delete.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './Table.scss';\r\n\r\nconst Table = ({headers, children}) => {\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                {\r\n                    headers.map(header => {\r\n                        return (\r\n                            <th>{header}</th>\r\n                        )\r\n                    })\r\n                }\r\n            </thead>\r\n            <tbody>\r\n                {children}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import {createContext} from 'react';\r\n\r\nconst JobContext = createContext(null);\r\n\r\nexport default JobContext;\r\n","import React, { Fragment } from \"react\";\r\nimport './Modal.scss';\r\nimport closeButton from './close-button.svg';\r\n\r\nconst Modal = ({ title, children, close }) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"overlay\"></div>\r\n            <section className=\"modal\">\r\n                <header>\r\n                    <h2 className=\"modal-title\">{title}</h2>\r\n                    <button \r\n                        className=\"close-button\"\r\n                        type=\"button\" \r\n                        onClick={close}>\r\n                        <img src={closeButton} />\r\n                        </button>\r\n                </header>\r\n                <article className=\"modal-content\">\r\n                    {children}\r\n                </article>\r\n            </section>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","export const JOBS_INIT = \"JOBS_INIT\";\r\nexport const JOBS_EDIT = \"JOBS_EDIT\";\r\nexport const JOBS_DELETE = \"JOBS_DELETE\";\r\n\r\nexport const jobsReducer = (state, action) => {\r\n    switch (action.type) {\r\n      \tcase JOBS_INIT:\r\n\t\t\treturn action.jobs;\r\n\t\tcase JOBS_EDIT: \r\n\t\t\treturn state.map(job => {\r\n\t\t\t\tif (job.id === action.editJ.id) {\r\n\t\t\t\t\tjob.name = action.editJ.name;\r\n\t\t\t\t}\r\n\t\t\t\treturn job;\r\n\t\t\t}\r\n\t\t);\r\n\t\tcase JOBS_DELETE: \r\n\t\t\treturn state.filter(job => job.id !== action.deleteJ.id);\r\n      \tdefault:\r\n        \treturn state;\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst urlJobs = 'https://5f518d325e98480016123ada.mockapi.io/api/v1/jobs/';\r\n\r\n\r\nexport const getJobs = async () => {\r\n    try {\r\n        const res = await axios.get(urlJobs);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - getJobs: ${err}`);\r\n    }\r\n};\r\n\r\nexport const editJob = async (selectedJob, newJob) => {\r\n    try {\r\n        const changeJob = {\r\n            ...selectedJob,\r\n            name: newJob\r\n        };\r\n        const res = await axios.put(urlJobs + changeJob.id, changeJob);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - editJob: ${err}`);\r\n    }\r\n};\r\n\r\nexport const deleteJob = async (job) => {\r\n    try {\r\n        const res = await axios.delete(urlJobs + job.id);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - deleteJob: ${err}`);\r\n    }\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport JobContext from '../../contexts/JobContext';\r\nimport Modal from '../modal/Modal';\r\nimport { JOBS_EDIT } from '../../reducers/JobsReducer';\r\nimport { editJob } from '../../services/JobsService';\r\n\r\nconst JobModal = () => {\r\n    const { setDisplayJobModal, selectedJob, jobsDispatch } = useContext(JobContext);\r\n    const [newJob, setNewJob] = useState(selectedJob);\r\n    const changeJob = event => setNewJob(event.target.value);\r\n\r\n    const save = async () => {\r\n        const editJ = await editJob(selectedJob, newJob);\r\n        jobsDispatch({type: JOBS_EDIT, editJ});\r\n        close();\r\n    };\r\n\r\n    const close = () => setDisplayJobModal(false);\r\n        \r\n    return (\r\n        <Modal title=\"Edit Job\" close={close}>\r\n            <form>\r\n                <input type=\"text\" defaultValue={selectedJob.name} onChange={changeJob}/>               \r\n                <button className=\"button-modal\" type=\"button\" onClick={save}>Save</button>\r\n            </form>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default JobModal;\r\n","import React from \"react\";\r\nimport './ContentContainer.scss';\r\n\r\nconst ContentContainer = ({ children }) => {\r\n    return(\r\n        <section className=\"content-container\">\r\n            {children}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default ContentContainer;\r\n","import React, { useState, useEffect, useReducer } from 'react';\r\nimport Table from '../table/Table';\r\nimport JobModal from '../jobModal/JobModal';\r\nimport JobContext from '../../contexts/JobContext';\r\nimport ContentContainer from '../contentContainer/ContentContainer';\r\nimport { jobsReducer, JOBS_INIT, JOBS_DELETE } from '../../reducers/JobsReducer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { getJobs, deleteJob } from '../../services/JobsService';\r\n\r\nconst JobPage = () => {\r\n\tconst [jobs, jobsDispatch] = useReducer(jobsReducer, []);\r\n    const [displayJobModal, setDisplayJobModal] = useState(false);\r\n\tconst [selectedJob, setSelectedJob] = useState();\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst promise = getJobs();\r\n\t\tpromise.then(data => jobsDispatch({ type: JOBS_INIT, jobs: data }));\r\n  \t}, []);\r\n    \r\n    const editJobs = job => {\r\n        setSelectedJob(job);\r\n        setDisplayJobModal(true);\r\n    };\r\n\t\r\n\tconst deleteJobs = async (job) => {\r\n\t\tconst deleteJ = await deleteJob(job)\r\n\t\tjobsDispatch({type: JOBS_DELETE, deleteJ});\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<div className=\"container-page\">\r\n\t\t\t<JobContext.Provider value={{ selectedJob, setDisplayJobModal, jobsDispatch }}>\r\n\t\t\t\t<ContentContainer>\r\n\t\t\t\t\t<Table headers={[\"Job Title\", \"Actions\"]}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tjobs.map(job => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<tr key={job.id}>\r\n\t\t\t\t\t\t\t\t\t\t<td>{job.name}</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => editJobs(job)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \r\n\t\t\t\t\t\t\t\t\t\t\t\ticon={faUserEdit} \r\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: `5px` }} />\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button-delete\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteJobs(job)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tDELETE\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faTrash} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: `5px` }} />\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t</ContentContainer>\r\n\t\t\t\t{ \r\n\t\t\t\t\tdisplayJobModal ? \r\n\t\t\t\t\t\t<JobModal /> \r\n\t\t\t\t\t: \r\n\t\t\t\t\t\tnull \r\n\t\t\t\t}\r\n\t\t\t</JobContext.Provider>\r\n\t\t</div>\r\n  \t);\r\n}\r\n\r\nexport default JobPage;\r\n","import {createContext} from 'react';\r\n\r\nconst UserContext = createContext(null);\r\n\r\nexport default UserContext;\r\n","export const USERS_INIT = \"USERS_INIT\";\r\nexport const USERS_ADD = \"USERS_ADD\";\r\nexport const USERS_EDIT = \"USERS_EDIT\";\r\nexport const USERS_DELETE = \"USERS_DELETE\";\r\n\r\n\r\nexport const usersReducer = (state, action) => {\r\n    switch (action.type) {\r\n\t\tcase USERS_INIT: \r\n\t\t\treturn action.users;\r\n\t\tcase USERS_ADD:\r\n\t\t\treturn [...state, action.addU];\r\n\t\tcase USERS_EDIT: \r\n\t\t\treturn state.map(user => {\r\n\t\t\t\tif (user.id === action.editU.id) {\r\n\t\t\t\t\tuser.name = action.editU.name;\r\n\t\t\t\t\tuser.jobId = action.editU.jobId;;\r\n\t\t\t\t}\r\n\t\t\t\treturn user;\r\n\t\t\t}\r\n\t\t);\r\n\t\tcase USERS_DELETE: \r\n\t\t\treturn state.filter(user => user.id !== action.deleteU.id);\r\n      \tdefault:\r\n        \treturn state;\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst urlUsers = 'https://5f518d325e98480016123ada.mockapi.io/api/v1/users/';\r\n\r\n\r\nexport const getUsers = async () => {\r\n    try {\r\n        const res = await axios.get(urlUsers);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - getUsers: ${err}`);\r\n    }\r\n};\r\n\r\nexport const addUser = async (newUser, newJob) => {\r\n    try {\r\n        const addNewUser = {\r\n            name: newUser,\r\n            jobId: newJob\r\n        };\r\n        const res = await axios.post(urlUsers, addNewUser);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - addUser: ${err}`);\r\n    }\r\n};\r\n\r\nexport const editUser = async (selectedUser, newName, newJobId) => {\r\n    try {\r\n        const changeUser = {\r\n            ...selectedUser,\r\n            name: newName,\r\n            jobId: newJobId\r\n        };\r\n        const res = await axios.put(urlUsers + changeUser.id, changeUser);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - editUser: ${err}`);\r\n    }\r\n};\r\n\r\nexport const deleteUser = async (user) => {\r\n    try {\r\n        const res = await axios.delete(urlUsers + user.id);\r\n        return res.data;\r\n    }catch(err) {\r\n        throw new Error(`Unhandled - deleteUser: ${err}`);\r\n    }\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport Modal from '../modal/Modal';\r\nimport UserContext from '../../contexts/UserContext';\r\nimport { USERS_EDIT } from '../../reducers/UsersReducer';\r\nimport { editUser } from '../../services/UsersService';\r\n\r\nconst UserModal = () => {\r\n    const { jobs, setDisplayUserModal, selectedUser, usersDispatch } = useContext(UserContext);\r\n    const [newName, setNewName] = useState(selectedUser);\r\n    const [newJobId, setNewJobId] = useState(selectedUser.jobId);\r\n\r\n    const changeName = event => setNewName(event.target.value);\r\n    const changeJobId = event => setNewJobId(event.target.value);\r\n\r\n    const save = async () => {\r\n        const editU = await editUser(selectedUser, newName, newJobId);\r\n        usersDispatch({type: USERS_EDIT, editU});\r\n        close();\r\n    };\r\n\r\n    const close = () => setDisplayUserModal(false);\r\n\r\n    return (\r\n        <Modal title=\"Edit User\" close={close}>\r\n            <form>\r\n                <input type=\"text\" defaultValue={selectedUser.name} onChange={changeName} />\r\n                <select defaultValue={selectedUser.jobId} onChange={changeJobId}>\r\n                    {\r\n                        jobs.map(job => {\r\n                            return (\r\n                                <option value={job.id}>\r\n                                    {job.name}\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n                <button className=\"button-modal\" type=\"button\" onClick={save}>Save</button>\r\n            </form>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default UserModal;\r\n","import React, { useState, useContext } from 'react';\r\nimport Modal from '../modal/Modal';\r\nimport UserContext from '../../contexts/UserContext';\r\nimport { USERS_ADD } from '../../reducers/UsersReducer';\r\nimport { addUser } from '../../services/UsersService';\r\n\r\nconst NewUserModal = () => {\r\n    const { jobs, setDisplayNewUser, usersDispatch } = useContext(UserContext);\r\n    const [newUser, setNewUser] = useState('');\r\n    const [newJobId, setNewJobId] = useState('');\r\n\r\n    const changeName = event => setNewUser(event.target.value);\r\n    const changeJobId = event => setNewJobId(event.target.value);\r\n\r\n    const addNewUser = async () => {\r\n        const addU = await addUser(newUser, newJobId);\r\n        usersDispatch({type: USERS_ADD, addU});\r\n        close();\r\n    };\r\n\r\n    const close = () => setDisplayNewUser(false);\r\n\r\n    return (\r\n        <Modal title=\"New User\" close={close}>\r\n            <form>\r\n                <input type=\"text\" onChange={changeName} placeholder=\"Full name\" />\r\n                <select defaultValue=\"-1\" onChange={changeJobId}>\r\n                    <option value=\"-1\" disabled selected>Choose job</option>\r\n                    {\r\n                        jobs.map(job => {\r\n                            return (\r\n                                <option value={job.id}>\r\n                                    {job.name}\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n                <button \r\n                    className=\"button-modal\" \r\n                    type=\"button\" \r\n                    onClick={addNewUser}>\r\n                    Add New User\r\n                </button>\r\n            </form>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default NewUserModal;\r\n","import React, { useState, useEffect, useReducer } from 'react';\r\nimport Table from '../table/Table';\r\nimport ContentContainer from '../contentContainer/ContentContainer';\r\nimport UserContext from '../../contexts/UserContext';\r\nimport UserModal from '../userModal/UserModal';\r\nimport NewUserModal from '../newUserModal/NewUserModal';\r\nimport { usersReducer, USERS_INIT, USERS_DELETE } from '../../reducers/UsersReducer';\r\nimport { jobsReducer, JOBS_INIT } from '../../reducers/JobsReducer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserPlus, faUserEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { getUsers, deleteUser } from '../../services/UsersService';\r\nimport { getJobs } from '../../services/JobsService';\r\n\r\nconst UserPage = () => {\r\n    const [users, usersDispatch] = useReducer(usersReducer, []);\r\n    const [jobs, jobsDispatch] = useReducer(jobsReducer, []);\r\n    const [selectedUser, setSelectedUser] = useState();\r\n    const [displayNewUser, setDisplayNewUser] = useState(false);\r\n    const [displayUserModal, setDisplayUserModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const promise = getUsers();\r\n        promise.then(data => usersDispatch({ type: USERS_INIT, users: data }));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const promise = getJobs();\r\n        promise.then(data => jobsDispatch({ type: JOBS_INIT, jobs: data }));\r\n    }, []);\r\n\r\n    const editUser = user => {\r\n        setSelectedUser(user);\r\n        setDisplayUserModal(true);\r\n    };\r\n    \r\n    const deleteUsers = async (user) => {\r\n\t\tconst deleteU = await deleteUser(user)\r\n\t\tusersDispatch({type: USERS_DELETE, deleteU});\r\n\t};\r\n\r\n    return (\r\n        <div className=\"container-page\">\r\n            <UserContext.Provider value={{ \r\n                jobs, \r\n                setDisplayUserModal, \r\n                selectedUser, \r\n                usersDispatch,\r\n                setDisplayNewUser }}>     \r\n                <button \r\n                    className=\"button-new-user\" \r\n                    type=\"button\" \r\n                    onClick={() => setDisplayNewUser(true)} >\r\n                    ADD NEW USER\r\n                    <FontAwesomeIcon \r\n                        icon={faUserPlus} \r\n                        style={{ marginLeft: `5px` }} />\r\n                </button>        \r\n                <ContentContainer>\r\n                    <Table headers={[\"Name\", \"Avatar\", \"Job Title\", \"Actions\"]}>\r\n                        {\r\n                            users.map(user => {\r\n                                const job = jobs.find(job => job.id == user.jobId) || { name: \"Not Found\" };\r\n                                return (\r\n                                    <tr key={user.id}>\r\n                                        <td>{user.name}</td>\r\n                                        <td><img className=\"avatar-img\" src={user.avatar} /></td>\r\n                                        <td>{job.name}</td> \r\n                                        <td>\r\n                                            <button\r\n                                                className=\"button-edit\"\r\n                                                onClick={() => editUser(user)}>\r\n                                                EDIT\r\n                                                <FontAwesomeIcon \r\n                                                    icon={faUserEdit} \r\n                                                    style={{ marginLeft: `5px` }} />\r\n                                            </button>\r\n                                            <button\r\n                                                className=\"button-delete\"\r\n                                                onClick={() => deleteUsers(user) }>\r\n                                                DELETE\r\n                                                <FontAwesomeIcon \r\n                                                    icon={faTrash} \r\n                                                    style={{ marginLeft: `5px` }} />\r\n                                            </button>\r\n                                        </td>      \r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        }\r\n                    </Table>\r\n                </ContentContainer>\r\n                {\r\n                    displayUserModal ?\r\n                        <UserModal />\r\n                    :\r\n                        null \r\n                }\r\n                {\r\n                    displayNewUser ?\r\n                        <NewUserModal />\r\n                    :\r\n                        null \r\n                }\r\n            </UserContext.Provider>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPage;\r\n","import React from 'react';\r\nimport './Navbar.scss';\r\nimport Home from '../pages/Home';\r\nimport JobPage from '../pages/JobPage';\r\nimport UserPage from '../pages/UserPage';\r\nimport iconNav from './icon-nav.svg';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <Router>\r\n          \t<nav className=\"nav\">\r\n          \t\t<ul>\r\n\t\t\t\t  \t<li><img className=\"icon-nav\" src={iconNav} /></li>\r\n            \t\t<li><Link className=\"link\" to=\"/\">Home</Link></li>\r\n            \t\t<li><Link className=\"link\" to=\"/users\">Users</Link></li>\r\n\t\t\t\t\t<li><Link className=\"link\" to=\"/jobs\">Jobs</Link></li>\r\n          \t\t</ul>\r\n        \t</nav>\r\n        \r\n      \t\t<Switch>\r\n      \t\t\t<Route path=\"/\" exact> <Home /> </Route>\r\n\t\t\t\t<Route path=\"/users\"> <UserPage /> </Route>\r\n          \t\t<Route path=\"/jobs\"> <JobPage /> </Route>\r\n        \t</Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return <footer>&copy; - Created by Maria Alarcon💖</footer>\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Fragment } from 'react';\r\nimport './App.scss';\r\nimport Navbar from './components/navbar/Navbar';\r\nimport Footer from './components/footer/Footer';\r\n\r\nconst App = () => {\r\n  \treturn (\r\n    \t<Fragment>\r\n\t  \t\t<Navbar />\r\n\t\t\t<Footer />\r\n    \t</Fragment>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}